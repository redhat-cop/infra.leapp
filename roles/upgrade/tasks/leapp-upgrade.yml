---
- name: leapp-upgrade | Include the parse_leapp_report role to check for inhibitors
  ansible.builtin.include_role:
    name: infra.leapp.parse_leapp_report
  when: check_leapp_analysis_results

- name: leapp-upgrade | Verify no inhibitor results found during preupgrade
  ansible.builtin.assert:
    that: not upgrade_inhibited
    msg: Inhibitors found, please investigate and rerun analysis.
  when: check_leapp_analysis_results

- name: leapp-upgrade | Register to leapp activation key
  community.general.redhat_subscription:
    state: present
    activationkey: "{{ satellite_activation_key_leapp }}"
    org_id: "{{ satellite_organization }}"
    force_register: true
  when:
    - leapp_upgrade_type == 'satellite'
    - satellite_organization is defined
    - satellite_activation_key_leapp is defined

- name: leapp-upgrade | Include custom_local_repos for local_repos_pre_leapp
  vars:
    __repos: "{{ local_repos_pre_leapp }}"
  ansible.builtin.include_role:
    name: infra.leapp.common
    tasks_from: custom_local_repos
  when: leapp_upgrade_type == "custom"

- name: leapp-upgrade | Include update-and-reboot.yml
  ansible.builtin.include_tasks: update-and-reboot.yml
  when: pre_upgrade_update | bool

- name: leapp-upgrade | Create /etc/leapp/files/leapp_upgrade_repositories.repo
  vars:
    __repos: "{{ local_repos_leapp }}"
    __leapp_repo_file: /etc/leapp/files/leapp_upgrade_repositories
  ansible.builtin.include_role:
    name: infra.leapp.common
    tasks_from: custom_local_repos
  when:
    - leapp_upgrade_type == 'custom'
    - local_repos_leapp | length > 0

- name: leapp-upgrade | Include disable-previous-repo-files.yml
  ansible.builtin.include_tasks: disable-previous-repo-files.yml
  loop:
    "{{ repo_files_to_remove_at_upgrade }}"
  when: leapp_upgrade_type == "custom"

- name: leapp-upgrade | Include rmmod-kernel-modules.yml
  ansible.builtin.include_tasks: rmmod-kernel-modules.yml
  loop: "{{ kernel_modules_to_unload_before_upgrade }}"

- name: leapp-upgrade | Block to rescue leapp failures to collect errors
  block:
    - name: leapp-upgrade | Start Leapp OS upgrade
      ansible.builtin.shell: >
        set -o pipefail;
        export PATH={{ os_path }};
        ulimit -n 16384;
        leapp upgrade --report-schema=1.2.0
        {{ leapp_upgrade_opts }}
        {{ leapp_enable_repos_args }}
        2>&1 | tee -a {{ log_file }}
      environment: "{{ leapp_env_vars }}"
      args:
        executable: /bin/bash
      async: "{{ async_timeout_maximum | int }}"
      poll: "{{ async_poll_interval | int }}"
      changed_when: true
  rescue:
    - name: leapp-upgrade | Include the parse_leapp_report role to check for inhibitors
      ansible.builtin.include_role:
        name: infra.leapp.parse_leapp_report

    - name: leapp-upgrade | Display inhibitors
      ansible.builtin.debug:
        var: results_inhibitors.stdout_lines
      when: results_inhibitors.stdout_lines | length > 0

    - name: leapp-upgrade | Display errors
      ansible.builtin.debug:
        var: results_errors.stdout_lines
      when: results_errors.stdout_lines | length > 0

    - name: leapp-upgrade | Fail Leapp upgrade
      ansible.builtin.fail:
        msg: >-
          Errors encountered running Leapp upgrade command.
          Review the tasks above or the result file at {{ result_filename }}.

- name: leapp-upgrade | Reboot to continue Leapp OS upgrade
  ansible.builtin.reboot:
    msg: Host is starting Leapp OS upgrade now!
    reboot_timeout: "{{ upgrade_timeout }}"
    post_reboot_delay: "{{ post_reboot_delay }}"
  timeout: "{{ upgrade_timeout }}"

# Ansible discovers /usr/bin/python on RHEL 7, then on RHEL 8 it is no longer available.
- name: leapp-upgrade | Set python interpreter to /usr/libexec/platform-python since /usr/bin/python is no longer available
  ansible.builtin.set_fact:
    ansible_python_interpreter: "{{ post_7_to_8_python_interpreter }}"
  when: ansible_distribution_major_version == "7"

- name: leapp-upgrade | Wait for leapp_resume run once service to no longer exist
  ansible.builtin.service:
    name: leapp_resume
    state: started
  check_mode: true
  register: leapp_resume_result
  ignore_errors: true
  until: leapp_resume_result.failed
  retries: "{{ leapp_resume_retries }}"
  delay: "{{ leapp_resume_delay }}"

- name: leapp-upgrade | Block to handle grub_boot_device option
  when: grub_boot_device is defined
  block:
    - name: leapp-upgrade | Run grub2-install
      ansible.builtin.shell: >
        export PATH={{ os_path }};
        grub2-install {{ grub_boot_device }}
      changed_when: true

    - name: leapp-upgrade | Reboot to pickup grub update
      ansible.builtin.reboot:
        reboot_timeout: "{{ reboot_timeout }}"
        post_reboot_delay: "{{ post_reboot_delay }}"
      timeout: "{{ reboot_timeout }}"

...
